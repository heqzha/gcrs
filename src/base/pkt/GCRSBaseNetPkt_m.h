//
// Generated file, do not edit! Created by opp_msgc 4.3 from src/base/pkt/GCRSBaseNetPkt.msg.
//

#ifndef _GCRSBASENETPKT_M_H_
#define _GCRSBASENETPKT_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "NetwPkt_m.h"
#include "GCRSBaseComZone.h"
#include <Coord.h>
// }}



/**
 * Class generated from <tt>src/base/pkt/GCRSBaseNetPkt.msg</tt> by opp_msgc.
 * <pre>
 * packet GCRSBaseNetPkt extends NetwPkt {
 *     
 *     long vinOriginSrc = -1;
 *     
 *     long vinForwardSrc = -1;
 *     
 *     long vinDest = -1;
 *     
 * 	int priority = 3;
 * 	
 * 	int channelNumber;
 * 	
 *     Coord locSrc;    
 *     
 *     Coord locForwad;
 *     
 *     Coord speedSrc;
 *     
 *     Coord speedForwad;
 *     
 *     double speedMaxSrc;
 *     
 *     double speedMaxForwarding;
 *     
 * 	long nin = -1;
 *     
 *     long hops;
 *     
 *     simtime_t timeTtl = 0.0f;
 *     
 *     simtime_t timestampForwarding = 0.0f;
 *     
 * 	simtime_t timestamp = 0.0f;
 * 	
 * 	long version = 0;
 * }
 * </pre>
 */
class GCRSBaseNetPkt : public ::NetwPkt
{
  protected:
    long vinOriginSrc_var;
    long vinForwardSrc_var;
    long vinDest_var;
    int priority_var;
    int channelNumber_var;
    Coord locSrc_var;
    Coord locForwad_var;
    Coord speedSrc_var;
    Coord speedForwad_var;
    double speedMaxSrc_var;
    double speedMaxForwarding_var;
    long nin_var;
    long hops_var;
    simtime_t timeTtl_var;
    simtime_t timestampForwarding_var;
    simtime_t timestamp_var;
    long version_var;

  private:
    void copy(const GCRSBaseNetPkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GCRSBaseNetPkt&);

  public:
    GCRSBaseNetPkt(const char *name=NULL, int kind=0);
    GCRSBaseNetPkt(const GCRSBaseNetPkt& other);
    virtual ~GCRSBaseNetPkt();
    GCRSBaseNetPkt& operator=(const GCRSBaseNetPkt& other);
    virtual GCRSBaseNetPkt *dup() const {return new GCRSBaseNetPkt(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual long getVinOriginSrc() const;
    virtual void setVinOriginSrc(long vinOriginSrc);
    virtual long getVinForwardSrc() const;
    virtual void setVinForwardSrc(long vinForwardSrc);
    virtual long getVinDest() const;
    virtual void setVinDest(long vinDest);
    virtual int getPriority() const;
    virtual void setPriority(int priority);
    virtual int getChannelNumber() const;
    virtual void setChannelNumber(int channelNumber);
    virtual Coord& getLocSrc();
    virtual const Coord& getLocSrc() const {return const_cast<GCRSBaseNetPkt*>(this)->getLocSrc();}
    virtual void setLocSrc(const Coord& locSrc);
    virtual Coord& getLocForwad();
    virtual const Coord& getLocForwad() const {return const_cast<GCRSBaseNetPkt*>(this)->getLocForwad();}
    virtual void setLocForwad(const Coord& locForwad);
    virtual Coord& getSpeedSrc();
    virtual const Coord& getSpeedSrc() const {return const_cast<GCRSBaseNetPkt*>(this)->getSpeedSrc();}
    virtual void setSpeedSrc(const Coord& speedSrc);
    virtual Coord& getSpeedForwad();
    virtual const Coord& getSpeedForwad() const {return const_cast<GCRSBaseNetPkt*>(this)->getSpeedForwad();}
    virtual void setSpeedForwad(const Coord& speedForwad);
    virtual double getSpeedMaxSrc() const;
    virtual void setSpeedMaxSrc(double speedMaxSrc);
    virtual double getSpeedMaxForwarding() const;
    virtual void setSpeedMaxForwarding(double speedMaxForwarding);
    virtual long getNin() const;
    virtual void setNin(long nin);
    virtual long getHops() const;
    virtual void setHops(long hops);
    virtual simtime_t getTimeTtl() const;
    virtual void setTimeTtl(simtime_t timeTtl);
    virtual simtime_t getTimestampForwarding() const;
    virtual void setTimestampForwarding(simtime_t timestampForwarding);
    virtual simtime_t getTimestamp() const;
    virtual void setTimestamp(simtime_t timestamp);
    virtual long getVersion() const;
    virtual void setVersion(long version);
};

inline void doPacking(cCommBuffer *b, GCRSBaseNetPkt& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, GCRSBaseNetPkt& obj) {obj.parsimUnpack(b);}


#endif // _GCRSBASENETPKT_M_H_
